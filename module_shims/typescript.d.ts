import typescript = require("../node_modules/typescript/lib/typescript.js");
declare const _default: Partial<typeof typescript>;
export default _default;
declare const createSourceFile: typeof typescript.createSourceFile, createWatchProgram: typeof typescript.createWatchProgram, createEmitAndSemanticDiagnosticsBuilderProgram: typeof typescript.createEmitAndSemanticDiagnosticsBuilderProgram, createAbstractBuilder: typeof typescript.createAbstractBuilder;
export { createSourceFile, createWatchProgram, createEmitAndSemanticDiagnosticsBuilderProgram, createSemanticDiagnosticsBuilderProgram, createAbstractBuilder, };
declare const _sys: typescript.System, _setSys: any;
export { _sys as sys, _setSys as setSys };
declare const ScriptSnapshot: typeof typescript.ScriptSnapshot, DisplayPartsSymbol: any;
export { ScriptSnapshot, DisplayPartsSymbol };
declare const ScriptTarget: typeof typescript.ScriptTarget, ModuleKind: typeof typescript.ModuleKind, JsxEmit: typeof typescript.JsxEmit, ScriptKind: typeof typescript.ScriptKind;
export { ScriptTarget, ModuleKind, JsxEmit, ScriptKind };
declare const createPreEmitDiagnostics: any, flattenDiagnosticMessageText: typeof typescript.flattenDiagnosticMessageText;
export { createPreEmitDiagnostics, flattenDiagnosticMessageText };
declare const createCompilerDiagnostic: any, createCompilerDiagnosticFromMessageChain: any;
export { createCompilerDiagnostic, createCompilerDiagnosticFromMessageChain };
declare const DiagnosticCategory: typeof typescript.DiagnosticCategory, ModuleResolutionKind: typeof typescript.ModuleResolutionKind, NewLineKind: typeof typescript.NewLineKind;
export { DiagnosticCategory, ModuleResolutionKind, NewLineKind };
declare const Extension: typeof typescript.Extension, ExtensionKind: any, NodeFlags: typeof typescript.NodeFlags;
export { Extension, ExtensionKind, NodeFlags };
declare const findConfigFile: typeof typescript.findConfigFile, parseConfigFileTextToJson: typeof typescript.parseConfigFileTextToJson, readConfigFile: typeof typescript.readConfigFile, parseJsonConfigFileContent: typeof typescript.parseJsonConfigFileContent;
export { findConfigFile, parseConfigFileTextToJson, readConfigFile, parseJsonConfigFileContent, };
declare const getPreEmitDiagnostics: typeof typescript.getPreEmitDiagnostics, getSemanticDiagnostics: any, getSyntacticDiagnostics: any, getDeclarationDiagnostics: any, getGlobalDiagnostics: any, getConfigFileParsingDiagnostics: typeof typescript.getConfigFileParsingDiagnostics;
export { getPreEmitDiagnostics, getSemanticDiagnostics, getSyntacticDiagnostics, getDeclarationDiagnostics, getGlobalDiagnostics, getConfigFileParsingDiagnostics, };
declare const createCompilerHost: typeof typescript.createCompilerHost, createIncrementalCompilerHost: typeof typescript.createIncrementalCompilerHost, createSourceMapWriter: any, createWatchCompilerHost: typeof typescript.createWatchCompilerHost;
export { createCompilerHost, createIncrementalCompilerHost, createSourceMapWriter, createWatchCompilerHost, };
declare const createIncrementalProgram: typeof typescript.createIncrementalProgram, createProgram: typeof typescript.createProgram;
export { createIncrementalProgram, createProgram };
declare const getSupportedExtensions: any, resolveModuleName: typeof typescript.resolveModuleName, resolveTypeReferenceDirective: typeof typescript.resolveTypeReferenceDirective;
export { getSupportedExtensions, resolveModuleName, resolveTypeReferenceDirective, };
declare const createLanguageService: typeof typescript.createLanguageService, createLanguageServiceSourceFile: typeof typescript.createLanguageServiceSourceFile, createLanguageServiceHost: any;
export { createLanguageService, createLanguageServiceSourceFile, createLanguageServiceHost, };
declare const createDocumentRegistry: typeof typescript.createDocumentRegistry;
export { createDocumentRegistry };
declare const createSemanticDiagnosticsBuilderProgram: typeof typescript.createSemanticDiagnosticsBuilderProgram;
